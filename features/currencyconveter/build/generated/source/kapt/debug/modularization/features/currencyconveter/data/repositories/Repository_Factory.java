// Generated by Dagger (https://dagger.dev).
package modularization.features.currencyconveter.data.repositories;

import dagger.internal.Factory;
import javax.inject.Provider;
import modularization.features.currencyconveter.data.api.CurrencyService;
import modularization.features.currencyconveter.data.room.RateDao;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class Repository_Factory implements Factory<Repository> {
  private final Provider<CurrencyService> serviceProvider;

  private final Provider<RateDao> rateDaoProvider;

  public Repository_Factory(Provider<CurrencyService> serviceProvider,
      Provider<RateDao> rateDaoProvider) {
    this.serviceProvider = serviceProvider;
    this.rateDaoProvider = rateDaoProvider;
  }

  @Override
  public Repository get() {
    return newInstance(serviceProvider.get(), rateDaoProvider.get());
  }

  public static Repository_Factory create(Provider<CurrencyService> serviceProvider,
      Provider<RateDao> rateDaoProvider) {
    return new Repository_Factory(serviceProvider, rateDaoProvider);
  }

  public static Repository newInstance(CurrencyService service, RateDao rateDao) {
    return new Repository(service, rateDao);
  }
}

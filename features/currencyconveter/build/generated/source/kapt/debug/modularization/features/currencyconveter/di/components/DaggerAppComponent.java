// Generated by Dagger (https://dagger.dev).
package modularization.features.currencyconveter.di.components;

import android.content.SharedPreferences;
import androidx.lifecycle.ViewModel;
import dagger.internal.DoubleCheck;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;
import modularization.features.currencyconveter.data.api.CurrencyService;
import modularization.features.currencyconveter.data.repositories.Repository;
import modularization.features.currencyconveter.data.repositories.Repository_Factory;
import modularization.features.currencyconveter.data.room.AppDatabase;
import modularization.features.currencyconveter.data.room.RateDao;
import modularization.features.currencyconveter.di.modules.ApiModule;
import modularization.features.currencyconveter.di.modules.ApiModule_ProvideCurrencyServiceFactory;
import modularization.features.currencyconveter.di.modules.ApiModule_ProvideRetrofitFactory;
import modularization.features.currencyconveter.di.modules.RoomModule;
import modularization.features.currencyconveter.di.modules.RoomModule_ProvidesRateDaoFactory;
import modularization.features.currencyconveter.di.modules.RoomModule_ProvidesRoomDatabaseFactory;
import modularization.features.currencyconveter.di.modules.SharedPreferencesModule;
import modularization.features.currencyconveter.di.modules.SharedPreferencesModule_ProvidesSharedPreferencesFactory;
import modularization.features.currencyconveter.ui.ViewModelFactory;
import modularization.features.currencyconveter.ui.ViewModelFactory_Factory;
import modularization.features.currencyconveter.ui.home.HomeFragment;
import modularization.features.currencyconveter.ui.home.HomeFragment_MembersInjector;
import modularization.features.currencyconveter.ui.home.HomeViewModel;
import modularization.features.currencyconveter.ui.home.HomeViewModel_Factory;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<CurrencyService> provideCurrencyServiceProvider;

  private Provider<RateDao> providesRateDaoProvider;

  private Provider<Repository> repositoryProvider;

  private Provider<SharedPreferences> providesSharedPreferencesProvider;

  private Provider<HomeViewModel> homeViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private Provider<AppDatabase> providesRoomDatabaseProvider;

  private DaggerAppComponent(RoomModule roomModuleParam,
      SharedPreferencesModule sharedPreferencesModuleParam) {

    initialize(roomModuleParam, sharedPreferencesModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final RoomModule roomModuleParam,
      final SharedPreferencesModule sharedPreferencesModuleParam) {
    this.provideRetrofitProvider = DoubleCheck.provider(ApiModule_ProvideRetrofitFactory.create());
    this.provideCurrencyServiceProvider = DoubleCheck.provider(ApiModule_ProvideCurrencyServiceFactory.create(provideRetrofitProvider));
    this.providesRateDaoProvider = DoubleCheck.provider(RoomModule_ProvidesRateDaoFactory.create(roomModuleParam));
    this.repositoryProvider = Repository_Factory.create(provideCurrencyServiceProvider, providesRateDaoProvider);
    this.providesSharedPreferencesProvider = DoubleCheck.provider(SharedPreferencesModule_ProvidesSharedPreferencesFactory.create(sharedPreferencesModuleParam));
    this.homeViewModelProvider = HomeViewModel_Factory.create(repositoryProvider, providesSharedPreferencesProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(1).put(HomeViewModel.class, (Provider) homeViewModelProvider).build();
    this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
    this.providesRoomDatabaseProvider = DoubleCheck.provider(RoomModule_ProvidesRoomDatabaseFactory.create(roomModuleParam));
  }

  @Override
  public void inject(HomeFragment homeFragment) {
    injectHomeFragment(homeFragment);
  }

  @Override
  public RateDao rateDao() {
    return providesRateDaoProvider.get();
  }

  @Override
  public AppDatabase appDatabase() {
    return providesRoomDatabaseProvider.get();
  }

  private HomeFragment injectHomeFragment(HomeFragment instance) {
    HomeFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  public static final class Builder {
    private RoomModule roomModule;

    private SharedPreferencesModule sharedPreferencesModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder apiModule(ApiModule apiModule) {
      Preconditions.checkNotNull(apiModule);
      return this;
    }

    public Builder roomModule(RoomModule roomModule) {
      this.roomModule = Preconditions.checkNotNull(roomModule);
      return this;
    }

    public Builder sharedPreferencesModule(SharedPreferencesModule sharedPreferencesModule) {
      this.sharedPreferencesModule = Preconditions.checkNotNull(sharedPreferencesModule);
      return this;
    }

    public AppComponent build() {
      Preconditions.checkBuilderRequirement(roomModule, RoomModule.class);
      Preconditions.checkBuilderRequirement(sharedPreferencesModule, SharedPreferencesModule.class);
      return new DaggerAppComponent(roomModule, sharedPreferencesModule);
    }
  }
}

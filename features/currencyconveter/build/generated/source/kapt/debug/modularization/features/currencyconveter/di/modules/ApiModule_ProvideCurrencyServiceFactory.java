// Generated by Dagger (https://dagger.dev).
package modularization.features.currencyconveter.di.modules;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import modularization.features.currencyconveter.data.api.CurrencyService;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApiModule_ProvideCurrencyServiceFactory implements Factory<CurrencyService> {
  private final Provider<Retrofit> retrofitProvider;

  public ApiModule_ProvideCurrencyServiceFactory(Provider<Retrofit> retrofitProvider) {
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public CurrencyService get() {
    return provideCurrencyService(retrofitProvider.get());
  }

  public static ApiModule_ProvideCurrencyServiceFactory create(
      Provider<Retrofit> retrofitProvider) {
    return new ApiModule_ProvideCurrencyServiceFactory(retrofitProvider);
  }

  public static CurrencyService provideCurrencyService(Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(ApiModule.INSTANCE.provideCurrencyService(retrofit));
  }
}
